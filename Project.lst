Microsoft (R) Macro Assembler Version 14.28.29913.0	    05/31/21 16:30:20
0String Primitives & MACROs     (Proj6_byrdr.asm	     Page 1 - 1


				TITLE String Primitives & MACROs     (Proj6_byrdr.asm)

				; Author: Ravonne Byrd
				; Last Modified: May 28, 2021
				; OSU email address: byrdr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6               Due Date: June 6, 2021
				; Description: TODO

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; This MACRO processes strings by using Irvine's ReadString 
				;   to get user input.
				;
				; Preconditions:    Uses and restores edx, ecx, eax
				;                   Uses mDisplayString - which cannot accept argument using edx. 
				;
				; Postconditions: None
				;
				; Receives:
				;           offsetPrompt                = reference input parameter, prompt string array
				;           offsetUserInputStorage      = reference output parameter, user entered string 
				;           maxArray                    = value input parameter, max size of array allowed for input
				;           lengthInput                 = reference output parameter, actual size, in bytes, of input
				;
				; Returns:
				;            offsetUserInputStorage      = reference output parameter, user entered string
				;            lengthInput                 = reference output parameter, actual size, in bytes, of user input
				;-------------------------------------------------------------------------------------------------------------
				mGetString MACRO offsetPrompt:REQ, offsetUserInputStorage:REQ, maxArray:REQ, lengthInput:REQ
				    push    edx
				    push    ecx
				    push    eax

				    ; display prompt
				    mDisplayString  offsetPrompt

				    ; get user input
				    mov     edx, offsetUserInputStorage
				    mov     ecx, maxArray
				    call    ReadString
				    mov     DWORD PTR [lengthInput], eax

				    pop     eax
				    pop     ecx
				    pop     edx
				ENDM

				;---------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; This MACRO uses Irvine's WriteString to print a memory addressed string.
				;
				; Preconditions: Do not use edx as an argument.
				;
				; Postconditions: edx (used and restored)
				;
				; Receives:
				;           offsetString = reference input parameter, string array address
				;
				; Returns: None
				;--------------------------------------------------------------------------
				mDisplayString MACRO offsetString:REQ
				    push    edx
				    mov     edx, offsetString
				    call    WriteString
				    pop     edx
				ENDM


				; constant definitions
 = 80000000			LO_INT_SDWORD       =   2147483648
 = 7FFFFFFF			HI_INT_SDWORD       =   2147483647

 = 00000030			LO_ASCII_DEC_NUM    =   48
 = 00000039			HI_ASCII_DEC_NUM    =   57

 = 0000002D			NEG_SIGN            =   45
 = 0000002B			POS_SIGN            =   43

 = 00000000			ZERO                =   0
 = 00000001			ONE                 =   1
 = 0000000A			TEN                 =   10
 = 0000000B			ELEVEN              =   11
 = 00000030			FORTY_EIGHT         =   48
 = 00000032			FIFTY               =   50

 00000000			.data
				    ; string array variables
 00000000 4C 6F 77 65 72	    programTitle                BYTE        "Lower-Level I/O Procedures for Numerical Strings by Ravonne Byrd",0
	   2D 4C 65 76 65
	   6C 20 49 2F 4F
	   20 50 72 6F 63
	   65 64 75 72 65
	   73 20 66 6F 72
	   20 4E 75 6D 65
	   72 69 63 61 6C
	   20 53 74 72 69
	   6E 67 73 20 62
	   79 20 52 61 76
	   6F 6E 6E 65 20
	   42 79 72 64 00
 00000041 49 66 20 79 6F	    programDescription          BYTE        "If you input 10 integers that can each fit in a signed doubleword,",13,10,
	   75 20 69 6E 70
	   75 74 20 31 30
	   20 69 6E 74 65
	   67 65 72 73 20
	   74 68 61 74 20
	   63 61 6E 20 65
	   61 63 68 20 66
	   69 74 20 69 6E
	   20 61 20 73 69
	   67 6E 65 64 20
	   64 6F 75 62 6C
	   65 77 6F 72 64
	   2C 0D 0A 74 68
	   69 73 20 70 72
	   6F 67 72 61 6D
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 61 74 20 6C
	   69 73 74 20 6F
	   66 20 69 6E 74
	   65 67 65 72 73
	   2C 20 61 73 20
	   77 65 6C 6C 20
	   61 73 0D 0A 72
	   65 70 6F 72 74
	   20 62 61 63 6B
	   20 74 68 65 69
	   72 20 73 75 6D
	   20 61 6E 64 20
	   72 6F 75 6E 64
	   65 64 20 61 76
	   65 72 61 67 65
	   2E 0D 0A 00
				                                            "this program will display that list of integers, as well as",13,10,
				                                            "report back their sum and rounded average.",13,10,0
 000000EF 50 6C 65 61 73	    userPrompt                  BYTE        "Please enter your integer: ",0
	   65 20 65 6E 74
	   65 72 20 79 6F
	   75 72 20 69 6E
	   74 65 67 65 72
	   3A 20 00
 0000010B 54 72 79 20 61	    secondUserPrompt            BYTE        "Try again: ",0
	   67 61 69 6E 3A
	   20 00
 00000117 41 72 65 20 79	    errorMessage                BYTE        "Are you sure that was an integer? Maybe it was too large for 32-bits.",13,10,0
	   6F 75 20 73 75
	   72 65 20 74 68
	   61 74 20 77 61
	   73 20 61 6E 20
	   69 6E 74 65 67
	   65 72 3F 20 4D
	   61 79 62 65 20
	   69 74 20 77 61
	   73 20 74 6F 6F
	   20 6C 61 72 67
	   65 20 66 6F 72
	   20 33 32 2D 62
	   69 74 73 2E 0D
	   0A 00
 0000015F 59 6F 75 20 65	    userEntered                 BYTE        "You entered: ",0
	   6E 74 65 72 65
	   64 3A 20 00
 0000016D 54 68 65 69 72	    userSum                     BYTE        "Their sum: ",0
	   20 73 75 6D 3A
	   20 00
 00000179 54 68 65 69 72	    userAverage                 BYTE        "Their average: ",0
	   20 61 76 65 72
	   61 67 65 3A 20
	   00
 00000189 54 68 61 6E 6B	    goodbyeMessage              BYTE        "Thank you for your participation, and please enjoy your day.",13,10,0
	   20 79 6F 75 20
	   66 6F 72 20 79
	   6F 75 72 20 70
	   61 72 74 69 63
	   69 70 61 74 69
	   6F 6E 2C 20 61
	   6E 64 20 70 6C
	   65 61 73 65 20
	   65 6E 6A 6F 79
	   20 79 6F 75 72
	   20 64 61 79 2E
	   0D 0A 00

				    ; variables for user input
 000001C8  00000032 [		    userNum                     BYTE        FIFTY DUP(?)           ; user input buffer
	    00
	   ]
 000001FA 00000032		    maxCharUserNum              DWORD       SIZEOF userNum      ; max size of userNum
 000001FE 00000000		    byteCount                   DWORD       ?                   ; holds count of actual bytes used in userNum

				    ; ReadVal procedure variables
 00000202 00000000		    numInt                      SDWORD      ZERO 
 00000206 00000000		    negate                      DWORD       ZERO                   ; boolean
 0000020A 00000000		    tempHoldAL                  SDWORD      ZERO
				    
				    ; main procedure loop variables
 0000020E  0000000A [		    intArray                    SDWORD      TEN DUP(?)
	    00000000
	   ]
 00000236 00000000		    sum                         SDWORD      ?
 0000023A 00000000		    average                     SDWORD      ?
 0000023E 2C 20 00		    comma                       BYTE        ", ",0
 00000241  0000000B [		    newString                   BYTE        ELEVEN DUP(?)
	    00
	   ]

 00000000			.code
 00000000			main PROC
				;--------------------------------------------------------------
				; A. Introduction
				;--------------------------------------------------------------
 00000000  68 00000000 R	    push    offset programTitle
 00000005  68 00000041 R	    push    offset programDescription
 0000000A  E8 0000009D		    call    Introduction

				;--------------------------------------------------------------
				; B. Retrieving user input
				;--------------------------------------------------------------
				    ;--------------------------------------------------------------
				    ; This loop gets ten valid signed integers from the user.
				    ;   It will store these integers in the array, intArray.
				    ;--------------------------------------------------------------

				    ; set up for _getInputLoop
 0000000F  B9 0000000A		    mov     ecx, LENGTHOF intArray
 00000014  BE 0000020E R	    mov     esi, offset intArray

 00000019			_getInputLoop: 
				    
 00000019  68 0000020A R	    push    offset tempHoldAL
 0000001E  68 00000117 R	    push    offset errorMessage
 00000023  68 00000206 R	    push    offset negate
 00000028  68 0000010B R	    push    offset secondUserPrompt
 0000002D  68 00000202 R	    push    offset numInt
 00000032  68 000000EF R	    push    offset userPrompt
 00000037  68 000001C8 R	    push    offset userNum
 0000003C  FF 35 000001FA R	    push    maxCharUserNum
 00000042  68 000001FE R	    push    offset byteCount
 00000047  E8 00000091		    call    ReadVal
				    
				    ; add current numInt into intArray, via ebx
 0000004C  8B 1D 00000202 R	    mov     ebx, numInt                 
 00000052  89 1E		    mov     SDWORD PTR [esi], ebx

				     ; clear numInt for next iteration
 00000054  C7 05 00000202 R	    mov     numInt, ZERO               
	   00000000
 0000005E  83 C6 04		    add     esi, TYPE intArray          

 00000061  E2 B6		    LOOP    _getInputLoop

				;--------------------------------------------------------------
				; C. Display to the user their list of ten valid integers.
				;--------------------------------------------------------------
				    ; Display Prompt
 00000063  B8 0000015F R	    mov     eax, offset userEntered
				    mDisplayString  eax
 00000068  52		     1	    push    edx
 00000069  8B D0	     1	    mov     edx, eax
 0000006B  E8 00000000 E     1	    call    WriteString
 00000070  5A		     1	    pop     edx

				    ;--------------------------------------------------------------
				    ; This loop displays the integers from intArray as ASCII  
				    ;   strings, using the WriteVal procedure.
				    ;--------------------------------------------------------------

				    ; set up for _getInputLoop
 00000071  B9 0000000A		    mov     ecx, LENGTHOF intArray
 00000076  BE 0000020E R	    mov     esi, offset intArray

 0000007B			_displayIntArrayASCII:
 0000007B  8B 06		    mov     eax, [esi]

 0000007D  68 00000241 R	    push    offset newString
 00000082  50			    push    eax
 00000083  E8 00000150		    call    WriteVal

 00000088  B8 0000023E R	    mov     eax, offset comma
				    mDisplayString  eax
 0000008D  52		     1	    push    edx
 0000008E  8B D0	     1	    mov     edx, eax
 00000090  E8 00000000 E     1	    call    WriteString
 00000095  5A		     1	    pop     edx

 00000096  83 C6 04		    add     esi, TYPE intArray
 00000099  E2 E0		    LOOP    _displayIntArrayASCII

				;--------------------------------------------------------------
				; D. Display to the user the sum
				;--------------------------------------------------------------

				;--------------------------------------------------------------
				; E. Display to the user the rounded average.
				;--------------------------------------------------------------

				;--------------------------------------------------------------
				; F. Goodbye
				;--------------------------------------------------------------
 0000009B  68 00000189 R	    push    offset goodbyeMessage
 000000A0  E8 0000013A		    call    Goodbye

				    Invoke ExitProcess,0	; exit to operating system
 000000A5  6A 00	   *	    push   +000000000h
 000000A7  E8 00000000 E   *	    call   ExitProcess
 000000AC			main ENDP

				;---------------------------------------------------------------------------------
				; Name: Introduction
				;
				; This procedure displays the program's title, author, and description
				;   to the user.
				;
				; Preconditions: Uses mDisplayString - which cannot accept argument using edx. 
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+16] = reference of string input parameter - program's title
				;           [ebp+12] = reference of string input parameter - program's description
				;
				; Returns: None
				;-----------------------------------------------------------------------------------
 000000AC			Introduction PROC USES edx
 000000AC  52		   *	    push   edx
 000000AD  55			    push    ebp
 000000AE  8B EC		    mov     ebp, esp

 000000B0  E8 00000000 E	    call                CrLf
				    mDisplayString      [ebp+16]
 000000B5  52		     1	    push    edx
 000000B6  8B 55 10	     1	    mov     edx, [ebp+16]
 000000B9  E8 00000000 E     1	    call    WriteString
 000000BE  5A		     1	    pop     edx
 000000BF  E8 00000000 E	    call                CrLf
 000000C4  E8 00000000 E	    call                CrLf
				    mDisplayString      [ebp+12]
 000000C9  52		     1	    push    edx
 000000CA  8B 55 0C	     1	    mov     edx, [ebp+12]
 000000CD  E8 00000000 E     1	    call    WriteString
 000000D2  5A		     1	    pop     edx
 000000D3  E8 00000000 E	    call                CrLf

 000000D8  5D			    pop     ebp
 000000D9  5A		   *	    pop    edx
 000000DA  C2 0008		    RET     8
 000000DD			Introduction EndP

				;----------------------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; This procedure uses mGetString to prompt the user for a number, which is stored in memory as
				;   a string. It then uses an algorithm to check that the number th user has inputted is indeed a
				;   number, and validates that it is within range. The procedure returns the string as a signed integer.
				;
				; Preconditions: Uses and restores eax ecx edx esi ebx
				;               Uses mGetString, which uses and restores edx, ecx.
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+60]    =   reference output parameter, tempHoldAL
				;           [ebp+56]    =   reference input parameter, error message
				;           [ebp+52]    =   reference output parameter, negate
				;           [ebp+48]    =   reference input parameter, try again prompt
				;           [ebp+44]    =   reference output parameter, int to add to array of user inputted values
				;       Primarily for mGetString:
				;           [ebp+40]    =   reference input parameter, prompt string array
				;           [ebp+36]    =   reference output parameter, user entered string 
				;           [ebp+32]    =   value input parameter, max size of array allowed for input
				;           [ebp+28]    =   reference output parameter, actual size, in bytes, of input
				;
				; Returns:
				;           [ebp+44]    =   reference output parameter, int to add to array of user inputted values
				;-----------------------------------------------------------------------------------------------------
 000000DD			ReadVal PROC USES eax ecx edx esi ebx
 000000DD  50		   *	    push   eax
 000000DE  51		   *	    push   ecx
 000000DF  52		   *	    push   edx
 000000E0  56		   *	    push   esi
 000000E1  53		   *	    push   ebx
 000000E2  55			    push    ebp
 000000E3  8B EC		    mov     ebp, esp

 000000E5			_firstTry:
				    mGetString      [ebp+40], [ebp+36], [ebp+32], [ebp+28]
 000000E5  52		     1	    push    edx
 000000E6  51		     1	    push    ecx
 000000E7  50		     1	    push    eax
 000000E8  52		     2	    push    edx
 000000E9  8B 55 28	     2	    mov     edx, [ebp+40]
 000000EC  E8 00000000 E     2	    call    WriteString
 000000F1  5A		     2	    pop     edx
 000000F2  8B 55 24	     1	    mov     edx, [ebp+36]
 000000F5  8B 4D 20	     1	    mov     ecx, [ebp+32]
 000000F8  E8 00000000 E     1	    call    ReadString
 000000FD  89 45 1C	     1	    mov     DWORD PTR [[ebp+28]], eax
 00000100  58		     1	    pop     eax
 00000101  59		     1	    pop     ecx
 00000102  5A		     1	    pop     edx
 00000103  EB 1E		    jmp     _setUp

				;----------------------------------------------------------------------
				; Jump to _tryAgain instead of _firstTry after an error because _tryAgain 
				;   will display the special error prompt for the user.
				;----------------------------------------------------------------------
 00000105			_tryAgain:
				    mGetString      [ebp+48], [ebp+36], [ebp+32], [ebp+28]
 00000105  52		     1	    push    edx
 00000106  51		     1	    push    ecx
 00000107  50		     1	    push    eax
 00000108  52		     2	    push    edx
 00000109  8B 55 30	     2	    mov     edx, [ebp+48]
 0000010C  E8 00000000 E     2	    call    WriteString
 00000111  5A		     2	    pop     edx
 00000112  8B 55 24	     1	    mov     edx, [ebp+36]
 00000115  8B 4D 20	     1	    mov     ecx, [ebp+32]
 00000118  E8 00000000 E     1	    call    ReadString
 0000011D  89 45 1C	     1	    mov     DWORD PTR [[ebp+28]], eax
 00000120  58		     1	    pop     eax
 00000121  59		     1	    pop     ecx
 00000122  5A		     1	    pop     edx

				;----------------------------------------------------------------------
				; Setting Up the Validation Loop
				;   Moving esi to point to the user entered string [ebp+36]
				;   Moving ecx to equal the actual amount bytes in the user string. 
				;----------------------------------------------------------------------
 00000123			_setUp:
 00000123  8B 75 24		    mov     esi, [ebp+36]
 00000126  8B 4D 1C		    mov     ecx, [ebp+28]               

				;----------------------------------------------------------------------
				; Validation Loop
				;   The first time the loop iterates, it first checks if there is a neg
				;       or pos sign. 
				;       If there is a neg sign, the loop will deal with negating 
				;           the final output. If pos, jump to end of first loop.
				;       After this first iteration, only numbers are allowed...
				;       (i.e. _noSymbolsValidationLoop).
				;   This loop includes validation - that the user inputted string is
				;       indeed a number, and that it's within the correct SDWORD range.
				;----------------------------------------------------------------------
 00000129			_validationLoop:
 00000129  AC			    LODSB
 0000012A  3C 2D		    cmp     AL, NEG_SIGN
 0000012C  74 63		    je      _negate
 0000012E  3C 2B		    cmp     AL, POS_SIGN
 00000130  74 2C		    je      _continueValidationFromNegPosSign
 00000132  EB 01		    jmp     _firstValidationContinue

 00000134			_noSymbolsValidationLoop:
 00000134  AC			    LODSB
 00000135			_firstValidationContinue:
 00000135  3C 30		    cmp     AL, LO_ASCII_DEC_NUM
 00000137  72 35		    jb      _error
 00000139  3C 39		    cmp     AL, HI_ASCII_DEC_NUM
 0000013B  77 31		    ja      _error

				    ;----------------------------------------------------------------------
				    ; Main aritmethic of alogrithm 
				    ;   Converts a string into it's SDWORD integer representation.
				    ;   1. First, store offset of tempHoldAl in ebx, then store current
				    ;       value of AL in tempHoldAL, since we need eax for multiplication.
				    ;   2. Next, store offset of numInt in edx, and move current value 
				    ;       of numInt into eax. 
				    ;   3. Multiply eax by 10.
				    ;       Check for any overflow, which is an instant jump to error.
				    ;   4. Add value of tempHoldAl to eax
				    ;   5. store new numInt value in numInt (not finalized, and is crucial 
				    ;       to aritmethic as long as loop is in effect).
				    ;-----------------------------------------------------------------------
 0000013D  2C 30		    sub     AL, FORTY_EIGHT             ; (AL - 48) - to get non-ASCII value of the string num inputted
 0000013F  8B 5D 3C		    mov     ebx, [ebp+60]               ; 1
 00000142  88 03		    mov     BYTE PTR [ebx], AL            
 00000144  8B 55 2C		    mov     edx, [ebp+44]               ; 2
 00000147  8B 02		    mov     eax, [edx]                   
 00000149  BA 0000000A		    mov     edx, TEN
 0000014E  F7 EA		    imul    edx                         ; 3
 00000150  70 1C		    jo      _error
 00000152  03 03		    add     eax, [ebx]                  ; 4

				    ;-----------------------------------------------------------------------
				    ; Before pushing final, result integer to numInt and exiting the loop 
				    ;   (when ecx = 0), it is important to check if the number is actually
				    ;   in SDWORD range. 
				    ;-----------------------------------------------------------------------
 00000154  83 F9 01		    cmp     ecx, ONE
 00000157  74 4E		    je      _rangeCheck
 00000159			_continueValidationFromRangeCheck:
 00000159  8B 5D 2C		    mov     ebx, [ebp+44]               
 0000015C  89 03		    mov     DWORD PTR [ebx], eax        ; 5
 0000015E			_continueValidationFromNegPosSign:
 0000015E  49			    dec     ecx
 0000015F  83 F9 00		    cmp     ecx, ZERO
 00000162  77 D0		    ja      _noSymbolsValidationLoop
				    
				    ;-----------------------------------------------------------------------
				    ; Circles back to negate boolean set inside _negate label.
				    ;   If set (negate = 1), then must perform negation.
				    ;-----------------------------------------------------------------------
 00000164  8B 5D 34		    mov     ebx, [ebp+52]
 00000167  83 3B 01		    cmp     DWORD PTR [ebx], ONE
 0000016A  74 30		    je      _performNegate
 0000016C  EB 57		    jmp     _finish

				;----------------------------------------------------------------------
				; Error message
				;   Displays error message, clears slate of numInt and negate, in order
				;       to try a new loop for fetching valid user input.
				;----------------------------------------------------------------------
 0000016E			_error:
				    mdisplayString      [ebp+56]
 0000016E  52		     1	    push    edx
 0000016F  8B 55 38	     1	    mov     edx, [ebp+56]
 00000172  E8 00000000 E     1	    call    WriteString
 00000177  5A		     1	    pop     edx

				    ; clear numInt
 00000178  8B 55 2C		    mov     edx, [ebp+44]                       
 0000017B  BB 00000000		    mov     ebx, ZERO
 00000180  89 1A		    mov     DWORD PTR [edx], ebx
				    
				    ; clear negate
 00000182  8B 55 34		    mov     edx, [ebp+52]                       
 00000185  BB 00000000		    mov     ebx, ZERO
 0000018A  89 1A		    mov     DWORD PTR [edx], ebx

 0000018C  E9 FFFFFF74		    jmp     _tryAgain

				;----------------------------------------------------------------------
				; If the value held in AL equals a dash (45d or 2dh), then must update
				;   the negation variable boolean. 
				;----------------------------------------------------------------------
 00000191			_negate:
 00000191  8B 5D 34		    mov     ebx, [ebp+52]
 00000194  C7 03 00000001	    mov     DWORD PTR [ebx], ONE
 0000019A  EB C2		    jmp     _continueValidationFromNegPosSign

				;----------------------------------------------------------------------
				; Actually performs the negation required for a negative SDWORD.
				;----------------------------------------------------------------------
 0000019C			_performNegate:
 0000019C  8B 5D 2C		    mov     ebx, [ebp+44]
 0000019F  8B 13		    mov     edx, [ebx]
 000001A1  F7 DA		    neg     edx
 000001A3  89 13		    mov     SDWORD PTR [ebx], edx
 000001A5  EB 1E		    jmp     _finish

				;------------------------------------------------------------------------
				; Checking that final eax value generated from algorithm is within SDWORD 
				;   range. Perform this check while still in algorithm loop (ecx = 1), but
				;   at end of computation algorithm, before storing in numInt. 
				;   Before checking range, must first check negate variable boolean 
				;   to see which check to perform (either for a positive or negative number)
				;       If true, jump to _checkRangeNegative.
				;       If false, jump to _checkRangePositive.
				;------------------------------------------------------------------------
 000001A7			_RangeCheck:
 000001A7  8B 5D 34		    mov     ebx, [ebp+52]                   
 000001AA  8B 1B		    mov     ebx, [ebx]
 000001AC  83 FB 01		    cmp     ebx, ONE
 000001AF  74 02		    je      _checkRangeNegative
 000001B1  EB 09		    jmp     _checkRangePositive

 000001B3			_checkRangeNegative:
 000001B3  3D 80000000		    cmp     eax, LO_INT_SDWORD
 000001B8  77 B4		    ja      _error
 000001BA  EB 9D		    jmp     _continueValidationFromRangeCheck

 000001BC			_checkRangePositive:
 000001BC  3D 7FFFFFFF		    cmp     eax, HI_INT_SDWORD
 000001C1  77 AB		    ja      _error
 000001C3  EB 94		    jmp     _continueValidationFromRangeCheck

 000001C5			_finish:
				    ; clear negate
 000001C5  8B 55 34		    mov     edx, [ebp+52]                       
 000001C8  BB 00000000		    mov     ebx, ZERO
 000001CD  89 1A		    mov     DWORD PTR [edx], ebx

 000001CF  5D			    pop     ebp
 000001D0  5B		   *	    pop    ebx
 000001D1  5E		   *	    pop    esi
 000001D2  5A		   *	    pop    edx
 000001D3  59		   *	    pop    ecx
 000001D4  58		   *	    pop    eax
 000001D5  C2 0024		    RET     36
 000001D8			ReadVal EndP

				;--------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; This procedure converts an SDWORD integer to its string ASCII representation.
				;   It will then print the numeric ASCII string
				;
				; Preconditions: 
				;               Uses mDisplayString to print the ASCII string.
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+12]    =   reference output parameter, ASCII string
				;           [ebp+8]    =   value input parameter, the SDWORD value to be converted
				;
				; Returns: None
				;---------------------------------------------------------------------------------
 000001D8			WriteVal PROC
 000001D8  55			    push    ebp
 000001D9  8B EC		    mov     ebp, esp


				    ; Use AL and STOSB to clear newString [ebp+12]
				    
 000001DB			_finish:
 000001DB  5D			    pop     ebp
 000001DC  C2 0008		    RET     8
 000001DF			WriteVal EndP

				;-----------------------------------------------------------------------------
				; Name: Goodbye
				;
				; This procedure terminates program with a goodbye message.
				;
				; Preconditions: Uses mDisplayString - which cannot accept argument using edx. 
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+12] = reference of string input parameter - program's goodbye
				;
				; Returns: None
				;------------------------------------------------------------------------------
 000001DF			Goodbye PROC USES edx
 000001DF  52		   *	    push   edx
 000001E0  55			    push    ebp
 000001E1  8B EC		    mov     ebp, esp

				    mDisplayString      [ebp+12]
 000001E3  52		     1	    push    edx
 000001E4  8B 55 0C	     1	    mov     edx, [ebp+12]
 000001E7  E8 00000000 E     1	    call    WriteString
 000001EC  5A		     1	    pop     edx

 000001ED  5D			    pop     ebp
				    RET
 000001EE  5A		   *	    pop    edx
 000001EF  C3		   *	    ret    00000h
 000001F0			Goodbye EndP

				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    05/31/21 16:30:20
0String Primitives & MACROs     (Proj6_byrdr.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000024C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001F0 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Goodbye  . . . . . . . . . . . .	P Near	 000001DF _TEXT	Length= 00000011 Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 000000AC _TEXT	Length= 00000031 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000DD _TEXT	Length= 000000FB Public STDCALL
  _firstTry  . . . . . . . . . .	L Near	 000000E5 _TEXT	
  _tryAgain  . . . . . . . . . .	L Near	 00000105 _TEXT	
  _setUp . . . . . . . . . . . .	L Near	 00000123 _TEXT	
  _validationLoop  . . . . . . .	L Near	 00000129 _TEXT	
  _noSymbolsValidationLoop . . .	L Near	 00000134 _TEXT	
  _firstValidationContinue . . .	L Near	 00000135 _TEXT	
  _continueValidationFromRangeCheck 	L Near	 00000159 _TEXT	
  _continueValidationFromNegPosSign 	L Near	 0000015E _TEXT	
  _error . . . . . . . . . . . .	L Near	 0000016E _TEXT	
  _negate  . . . . . . . . . . .	L Near	 00000191 _TEXT	
  _performNegate . . . . . . . .	L Near	 0000019C _TEXT	
  _RangeCheck  . . . . . . . . .	L Near	 000001A7 _TEXT	
  _checkRangeNegative  . . . . .	L Near	 000001B3 _TEXT	
  _checkRangePositive  . . . . .	L Near	 000001BC _TEXT	
  _finish  . . . . . . . . . . .	L Near	 000001C5 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 000001D8 _TEXT	Length= 00000007 Public STDCALL
  _finish  . . . . . . . . . . .	L Near	 000001DB _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000AC Public STDCALL
  _getInputLoop  . . . . . . . .	L Near	 00000019 _TEXT	
  _displayIntArrayASCII  . . . .	L Near	 0000007B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ELEVEN . . . . . . . . . . . . .	Number	 0000000Bh   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FIFTY  . . . . . . . . . . . . .	Number	 00000032h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FORTY_EIGHT  . . . . . . . . . .	Number	 00000030h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI_ASCII_DEC_NUM . . . . . . . .	Number	 00000039h   
HI_INT_SDWORD  . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_ASCII_DEC_NUM . . . . . . . .	Number	 00000030h   
LO_INT_SDWORD  . . . . . . . . .	Number	 -80000000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NEG_SIGN . . . . . . . . . . . .	Number	 0000002Dh   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
ONE  . . . . . . . . . . . . . .	Number	 00000001h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
POS_SIGN . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEN  . . . . . . . . . . . . . .	Number	 0000000Ah   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000000h   
average  . . . . . . . . . . . .	DWord	 0000023A _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 000001FE _DATA	
comma  . . . . . . . . . . . . .	Byte	 0000023E _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMessage . . . . . . . . . .	Byte	 00000117 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeMessage . . . . . . . . .	Byte	 00000189 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 0000020E _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxCharUserNum . . . . . . . . .	DWord	 000001FA _DATA	
negate . . . . . . . . . . . . .	DWord	 00000206 _DATA	
newString  . . . . . . . . . . .	Byte	 00000241 _DATA	
numInt . . . . . . . . . . . . .	DWord	 00000202 _DATA	
programDescription . . . . . . .	Byte	 00000041 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
secondUserPrompt . . . . . . . .	Byte	 0000010B _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000236 _DATA	
tempHoldAL . . . . . . . . . . .	DWord	 0000020A _DATA	
userAverage  . . . . . . . . . .	Byte	 00000179 _DATA	
userEntered  . . . . . . . . . .	Byte	 0000015F _DATA	
userNum  . . . . . . . . . . . .	Byte	 000001C8 _DATA	
userPrompt . . . . . . . . . . .	Byte	 000000EF _DATA	
userSum  . . . . . . . . . . . .	Byte	 0000016D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
