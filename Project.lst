Microsoft (R) Macro Assembler Version 14.28.29913.0	    05/31/21 20:25:21
0String Primitives & MACROs     (Proj6_byrdr.asm	     Page 1 - 1


				TITLE String Primitives & MACROs     (Proj6_byrdr.asm)

				; Author: Ravonne Byrd
				; Last Modified: May 28, 2021
				; OSU email address: byrdr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:  6               Due Date: June 6, 2021
				; Description: TODO

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;-----------------------------------------------------------------------------------------------------------
				; Name: mGetString
				;
				; This MACRO processes strings by using Irvine's ReadString 
				;   to get user input.
				;
				; Preconditions:    Uses and restores edx, ecx, eax
				;                   Uses mDisplayString - which cannot accept argument using edx. 
				;
				; Postconditions: None
				;
				; Receives:
				;           offsetPrompt                = reference input parameter, prompt string array
				;           offsetUserInputStorage      = reference output parameter, user entered string 
				;           maxArray                    = value input parameter, max size of array allowed for input
				;           lengthInput                 = reference output parameter, actual size, in bytes, of input
				;
				; Returns:
				;            offsetUserInputStorage      = reference output parameter, user entered string
				;            lengthInput                 = reference output parameter, actual size, in bytes, of user input
				;-------------------------------------------------------------------------------------------------------------
				mGetString MACRO offsetPrompt:REQ, offsetUserInputStorage:REQ, maxArray:REQ, lengthInput:REQ
				    push    edx
				    push    ecx
				    push    eax

				    ; display prompt
				    mDisplayString  offsetPrompt

				    ; get user input
				    mov     edx, offsetUserInputStorage
				    mov     ecx, maxArray
				    call    ReadString
				    mov     DWORD PTR [lengthInput], eax

				    pop     eax
				    pop     ecx
				    pop     edx
				ENDM

				;---------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; This MACRO uses Irvine's WriteString to print a memory addressed string.
				;
				; Preconditions: Do not use edx as an argument.
				;
				; Postconditions: edx (used and restored)
				;
				; Receives:
				;           offsetString = reference input parameter, string array address
				;
				; Returns: None
				;--------------------------------------------------------------------------
				mDisplayString MACRO offsetString:REQ
				    push    edx
				    mov     edx, offsetString
				    call    WriteString
				    pop     edx
				ENDM


				; constant definitions
 = 80000000			LO_INT_SDWORD       =   2147483648
 = 7FFFFFFF			HI_INT_SDWORD       =   2147483647

 = 00000030			LO_ASCII_DEC_NUM    =   48
 = 00000039			HI_ASCII_DEC_NUM    =   57

 = 0000002D			NEG_SIGN            =   45
 = 0000002B			POS_SIGN            =   43

 = 00000000			ZERO                =   0
 = 00000001			ONE                 =   1
 = 0000000A			TEN                 =   10
 = 0000000B			ELEVEN              =   11
 = 00000030			FORTY_EIGHT         =   48
 = 00000032			FIFTY               =   50

 00000000			.data
				    ; string array variables
 00000000 4C 6F 77 65 72	    programTitle                BYTE        "Lower-Level I/O Procedures for Numerical Strings by Ravonne Byrd",0
	   2D 4C 65 76 65
	   6C 20 49 2F 4F
	   20 50 72 6F 63
	   65 64 75 72 65
	   73 20 66 6F 72
	   20 4E 75 6D 65
	   72 69 63 61 6C
	   20 53 74 72 69
	   6E 67 73 20 62
	   79 20 52 61 76
	   6F 6E 6E 65 20
	   42 79 72 64 00
 00000041 49 66 20 79 6F	    programDescription          BYTE        "If you input 10 integers that can each fit in a signed doubleword,",13,10,
	   75 20 69 6E 70
	   75 74 20 31 30
	   20 69 6E 74 65
	   67 65 72 73 20
	   74 68 61 74 20
	   63 61 6E 20 65
	   61 63 68 20 66
	   69 74 20 69 6E
	   20 61 20 73 69
	   67 6E 65 64 20
	   64 6F 75 62 6C
	   65 77 6F 72 64
	   2C 0D 0A 74 68
	   69 73 20 70 72
	   6F 67 72 61 6D
	   20 77 69 6C 6C
	   20 64 69 73 70
	   6C 61 79 20 74
	   68 61 74 20 6C
	   69 73 74 20 6F
	   66 20 69 6E 74
	   65 67 65 72 73
	   2C 20 61 73 20
	   77 65 6C 6C 20
	   61 73 0D 0A 72
	   65 70 6F 72 74
	   20 62 61 63 6B
	   20 74 68 65 69
	   72 20 73 75 6D
	   20 61 6E 64 20
	   72 6F 75 6E 64
	   65 64 20 61 76
	   65 72 61 67 65
	   2E 0D 0A 00
				                                            "this program will display that list of integers, as well as",13,10,
				                                            "report back their sum and rounded average.",13,10,0
 000000EF 50 6C 65 61 73	    userPrompt                  BYTE        "Please enter your integer: ",0
	   65 20 65 6E 74
	   65 72 20 79 6F
	   75 72 20 69 6E
	   74 65 67 65 72
	   3A 20 00
 0000010B 54 72 79 20 61	    secondUserPrompt            BYTE        "Try again: ",0
	   67 61 69 6E 3A
	   20 00
 00000117 41 72 65 20 79	    errorMessage                BYTE        "Are you sure that was an integer? Maybe it was too large for 32-bits.",13,10,0
	   6F 75 20 73 75
	   72 65 20 74 68
	   61 74 20 77 61
	   73 20 61 6E 20
	   69 6E 74 65 67
	   65 72 3F 20 4D
	   61 79 62 65 20
	   69 74 20 77 61
	   73 20 74 6F 6F
	   20 6C 61 72 67
	   65 20 66 6F 72
	   20 33 32 2D 62
	   69 74 73 2E 0D
	   0A 00
 0000015F 59 6F 75 20 65	    userEntered                 BYTE        "You entered: ",0
	   6E 74 65 72 65
	   64 3A 20 00
 0000016D 54 68 65 69 72	    userSum                     BYTE        "Their sum: ",0
	   20 73 75 6D 3A
	   20 00
 00000179 54 68 65 69 72	    userAverage                 BYTE        "Their average: ",0
	   20 61 76 65 72
	   61 67 65 3A 20
	   00
 00000189 54 68 61 6E 6B	    goodbyeMessage              BYTE        "Thank you for your participation, and please enjoy your day.",13,10,0
	   20 79 6F 75 20
	   66 6F 72 20 79
	   6F 75 72 20 70
	   61 72 74 69 63
	   69 70 61 74 69
	   6F 6E 2C 20 61
	   6E 64 20 70 6C
	   65 61 73 65 20
	   65 6E 6A 6F 79
	   20 79 6F 75 72
	   20 64 61 79 2E
	   0D 0A 00

				    ; variables for user input
 000001C8  00000032 [		    userNum                     BYTE        FIFTY DUP(?)           ; user input buffer
	    00
	   ]
 000001FA 00000032		    maxCharUserNum              DWORD       SIZEOF userNum      ; max size of userNum
 000001FE 00000000		    byteCount                   DWORD       ?                   ; holds count of actual bytes used in userNum

				    ; ReadVal procedure variables
 00000202 00000000		    numInt                      SDWORD      ZERO 
 00000206 00000000		    negate                      DWORD       ZERO                   ; boolean
 0000020A 00000000		    tempHoldAL                  SDWORD      ZERO
				    
				    ; main procedure loop variables
 0000020E  0000000A [		    intArray                    SDWORD      TEN DUP(?)
	    00000000
	   ]
 00000236 0000000A		    lengthIntArray              SDWORD       LENGTHOF intArray
 0000023A 00000004		    typeIntArray                SDWORD       TYPE intArray

 0000023E 00000000		    sum                         SDWORD      ?
 00000242 00000000		    average                     SDWORD      ?
 00000246 2C 20 00		    comma                       BYTE        ", ",0
 00000249  0000000B [		    newString                   BYTE        ELEVEN DUP(?)
	    00
	   ]

 00000000			.code
 00000000			main PROC
				;--------------------------------------------------------------
				; A. Introduction
				;--------------------------------------------------------------
 00000000  68 00000000 R	    push    offset programTitle
 00000005  68 00000041 R	    push    offset programDescription
 0000000A  E8 00000104		    call    Introduction

				;--------------------------------------------------------------
				; B. Retrieving user input
				;--------------------------------------------------------------
				    ;--------------------------------------------------------------
				    ; This loop gets ten valid signed integers from the user.
				    ;   It will store these integers in the array, intArray.
				    ;--------------------------------------------------------------
				    ; set up for _getInputLoop
 0000000F  B9 0000000A		    mov     ecx, LENGTHOF intArray
 00000014  BE 0000020E R	    mov     esi, offset intArray

 00000019			_getInputLoop: 
 00000019  68 0000020A R	    push    offset tempHoldAL
 0000001E  68 00000117 R	    push    offset errorMessage
 00000023  68 00000206 R	    push    offset negate
 00000028  68 0000010B R	    push    offset secondUserPrompt
 0000002D  68 00000202 R	    push    offset numInt
 00000032  68 000000EF R	    push    offset userPrompt
 00000037  68 000001C8 R	    push    offset userNum
 0000003C  FF 35 000001FA R	    push    maxCharUserNum
 00000042  68 000001FE R	    push    offset byteCount
 00000047  E8 000000F8		    call    ReadVal
				    
				    ; add current numInt into intArray, via ebx
 0000004C  8B 1D 00000202 R	    mov     ebx, numInt                 
 00000052  89 1E		    mov     SDWORD PTR [esi], ebx

				     ; clear numInt for next iteration
 00000054  C7 05 00000202 R	    mov     numInt, ZERO               
	   00000000
 0000005E  03 35 0000023A R	    add     esi, typeIntArray          

 00000064  E2 B3		    LOOP    _getInputLoop

				;--------------------------------------------------------------
				; C. Display to the user their list of ten valid integers.
				;--------------------------------------------------------------
				    ; Display Prompt
 00000066  B8 0000015F R	    mov     eax, offset userEntered
				    mDisplayString  eax
 0000006B  52		     1	    push    edx
 0000006C  8B D0	     1	    mov     edx, eax
 0000006E  E8 00000000 E     1	    call    WriteString
 00000073  5A		     1	    pop     edx

				    ;--------------------------------------------------------------
				    ; This loop displays the integers from intArray as ASCII  
				    ;   strings, using the WriteVal procedure.
				    ;--------------------------------------------------------------
				    ; set up for _displayIntArrayASCII
 00000074  8B 0D 00000236 R	    mov     ecx, lengthIntArray
 0000007A  BE 0000020E R	    mov     esi, offset intArray

 0000007F			_displayIntArrayASCII:
				    ; put element (int) into eax
 0000007F  8B 06		    mov     eax, [esi]

				    ; Write integer as ASCII
 00000081  68 00000249 R	    push    offset newString
 00000086  50			    push    eax
 00000087  E8 000001B3		    call    WriteVal

				    ; Inserting comma after number
 0000008C  B8 00000246 R	    mov     eax, offset comma
				    mDisplayString  eax
 00000091  52		     1	    push    edx
 00000092  8B D0	     1	    mov     edx, eax
 00000094  E8 00000000 E     1	    call    WriteString
 00000099  5A		     1	    pop     edx

				    ; increment esi
 0000009A  83 C6 04		    add     esi, TYPE intArray
 0000009D  E2 E0		    LOOP    _displayIntArrayASCII

				;--------------------------------------------------------------
				; D. Display to the user the sum
				;--------------------------------------------------------------
				    ; Calculate sum
 0000009F  FF 35 00000236 R	    push    lengthIntArray
 000000A5  FF 35 0000023A R	    push    typeIntArray
 000000AB  68 0000023E R	    push    offset sum
 000000B0  68 0000020E R	    push    offset intArray
 000000B5  E8 0000018C		    call    CalculateSum

				    ; Display prompt
 000000BA  B8 0000016D R	    mov     eax, offset userSum
				    mDisplayString  eax
 000000BF  52		     1	    push    edx
 000000C0  8B D0	     1	    mov     edx, eax
 000000C2  E8 00000000 E     1	    call    WriteString
 000000C7  5A		     1	    pop     edx

				    ; Display sum
 000000C8  FF 35 0000023E R	    push    sum
 000000CE  E8 0000016C		    call    WriteVal

				;--------------------------------------------------------------
				; E. Display to the user the rounded average.
				;--------------------------------------------------------------
				    ; Calculate average
 000000D3  FF 35 00000236 R	    push    lengthIntArray
 000000D9  FF 35 0000023E R	    push    sum
 000000DF  68 00000242 R	    push    offset average
 000000E4  E8 00000183		    call    CalculateAverage

				    ; Display prompt
 000000E9  B8 00000179 R	    mov     eax, offset userAverage
				    mDisplayString  eax
 000000EE  52		     1	    push    edx
 000000EF  8B D0	     1	    mov     edx, eax
 000000F1  E8 00000000 E     1	    call    WriteString
 000000F6  5A		     1	    pop     edx

				    ; Display average
 000000F7  FF 35 00000242 R	    push    average
 000000FD  E8 0000013D		    call    WriteVal

				;--------------------------------------------------------------
				; F. Goodbye
				;--------------------------------------------------------------
 00000102  68 00000189 R	    push    offset goodbyeMessage
 00000107  E8 0000017B		    call    Goodbye

				    Invoke ExitProcess,0	; exit to operating system
 0000010C  6A 00	   *	    push   +000000000h
 0000010E  E8 00000000 E   *	    call   ExitProcess
 00000113			main ENDP

				;---------------------------------------------------------------------------------
				; Name: Introduction
				;
				; This procedure displays the program's title, author, and description
				;   to the user.
				;
				; Preconditions: Uses mDisplayString - which cannot accept argument using edx. 
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+16] = reference of string input parameter - program's title
				;           [ebp+12] = reference of string input parameter - program's description
				;
				; Returns: None
				;-----------------------------------------------------------------------------------
 00000113			Introduction PROC USES edx
 00000113  52		   *	    push   edx
 00000114  55			    push    ebp
 00000115  8B EC		    mov     ebp, esp

 00000117  E8 00000000 E	    call                CrLf
				    mDisplayString      [ebp+16]
 0000011C  52		     1	    push    edx
 0000011D  8B 55 10	     1	    mov     edx, [ebp+16]
 00000120  E8 00000000 E     1	    call    WriteString
 00000125  5A		     1	    pop     edx
 00000126  E8 00000000 E	    call                CrLf
 0000012B  E8 00000000 E	    call                CrLf
				    mDisplayString      [ebp+12]
 00000130  52		     1	    push    edx
 00000131  8B 55 0C	     1	    mov     edx, [ebp+12]
 00000134  E8 00000000 E     1	    call    WriteString
 00000139  5A		     1	    pop     edx
 0000013A  E8 00000000 E	    call                CrLf

 0000013F  5D			    pop     ebp
 00000140  5A		   *	    pop    edx
 00000141  C2 0008		    RET     8
 00000144			Introduction EndP

				;----------------------------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; This procedure uses mGetString to prompt the user for a number, which is stored in memory as
				;   a string. It then uses an algorithm to check that the number th user has inputted is indeed a
				;   number, and validates that it is within range. The procedure returns the string as a signed integer.
				;
				; Preconditions: Uses and restores eax ecx edx esi ebx
				;               Uses mGetString, which uses and restores edx, ecx.
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+60]    =   reference output parameter, tempHoldAL
				;           [ebp+56]    =   reference input parameter, error message
				;           [ebp+52]    =   reference output parameter, negate
				;           [ebp+48]    =   reference input parameter, try again prompt
				;           [ebp+44]    =   reference output parameter, int to add to array of user inputted values
				;       Primarily for mGetString:
				;           [ebp+40]    =   reference input parameter, prompt string array
				;           [ebp+36]    =   reference output parameter, user entered string 
				;           [ebp+32]    =   value input parameter, max size of array allowed for input
				;           [ebp+28]    =   reference output parameter, actual size, in bytes, of input
				;
				; Returns:
				;           [ebp+44]    =   reference output parameter, int to add to array of user inputted values
				;-----------------------------------------------------------------------------------------------------
 00000144			ReadVal PROC USES eax ecx edx esi ebx
 00000144  50		   *	    push   eax
 00000145  51		   *	    push   ecx
 00000146  52		   *	    push   edx
 00000147  56		   *	    push   esi
 00000148  53		   *	    push   ebx
 00000149  55			    push    ebp
 0000014A  8B EC		    mov     ebp, esp

 0000014C			_firstTry:
				    mGetString      [ebp+40], [ebp+36], [ebp+32], [ebp+28]
 0000014C  52		     1	    push    edx
 0000014D  51		     1	    push    ecx
 0000014E  50		     1	    push    eax
 0000014F  52		     2	    push    edx
 00000150  8B 55 28	     2	    mov     edx, [ebp+40]
 00000153  E8 00000000 E     2	    call    WriteString
 00000158  5A		     2	    pop     edx
 00000159  8B 55 24	     1	    mov     edx, [ebp+36]
 0000015C  8B 4D 20	     1	    mov     ecx, [ebp+32]
 0000015F  E8 00000000 E     1	    call    ReadString
 00000164  89 45 1C	     1	    mov     DWORD PTR [[ebp+28]], eax
 00000167  58		     1	    pop     eax
 00000168  59		     1	    pop     ecx
 00000169  5A		     1	    pop     edx
 0000016A  EB 1E		    jmp     _setUp

				;----------------------------------------------------------------------
				; Jump to _tryAgain instead of _firstTry after an error because _tryAgain 
				;   will display the special error prompt for the user.
				;----------------------------------------------------------------------
 0000016C			_tryAgain:
				    mGetString      [ebp+48], [ebp+36], [ebp+32], [ebp+28]
 0000016C  52		     1	    push    edx
 0000016D  51		     1	    push    ecx
 0000016E  50		     1	    push    eax
 0000016F  52		     2	    push    edx
 00000170  8B 55 30	     2	    mov     edx, [ebp+48]
 00000173  E8 00000000 E     2	    call    WriteString
 00000178  5A		     2	    pop     edx
 00000179  8B 55 24	     1	    mov     edx, [ebp+36]
 0000017C  8B 4D 20	     1	    mov     ecx, [ebp+32]
 0000017F  E8 00000000 E     1	    call    ReadString
 00000184  89 45 1C	     1	    mov     DWORD PTR [[ebp+28]], eax
 00000187  58		     1	    pop     eax
 00000188  59		     1	    pop     ecx
 00000189  5A		     1	    pop     edx

				;----------------------------------------------------------------------
				; Setting Up the Validation Loop
				;   Moving esi to point to the user entered string [ebp+36]
				;   Moving ecx to equal the actual amount bytes in the user string. 
				;----------------------------------------------------------------------
 0000018A			_setUp:
 0000018A  8B 75 24		    mov     esi, [ebp+36]
 0000018D  8B 4D 1C		    mov     ecx, [ebp+28]               

				;----------------------------------------------------------------------
				; Validation Loop
				;   The first time the loop iterates, it first checks if there is a neg
				;       or pos sign. If there is a neg sign, the loop will deal with  
				;       negating the final output. 
				;   For both neg or pos, must skip aritmetic and jump to end of loop.
				;   After this first iteration, only numbers are allowed...
				;       (i.e. _noSymbolsValidationLoop).
				;   This loop includes validation - that the user inputted string is
				;       indeed a number, and that it's within the correct SDWORD range.
				;   While validating, this loop is creating SDWORD from ASCII values.
				;----------------------------------------------------------------------
 00000190			_validationLoop:
 00000190  AC			    LODSB
 00000191  3C 2D		    cmp     AL, NEG_SIGN
 00000193  74 63		    je      _negate
 00000195  3C 2B		    cmp     AL, POS_SIGN
 00000197  74 2C		    je      _continueValidationFromNegPosSign
 00000199  EB 01		    jmp     _firstValidationContinue

 0000019B			_noSymbolsValidationLoop:
 0000019B  AC			    LODSB
 0000019C			_firstValidationContinue:
 0000019C  3C 30		    cmp     AL, LO_ASCII_DEC_NUM
 0000019E  72 35		    jb      _error
 000001A0  3C 39		    cmp     AL, HI_ASCII_DEC_NUM
 000001A2  77 31		    ja      _error

				    ;----------------------------------------------------------------------
				    ; Main aritmethic of alogrithm 
				    ;   Converts a string into it's SDWORD integer representation.
				    ;   1. First, store offset of tempHoldAl in ebx, then store current
				    ;       value of AL in tempHoldAL, since we need eax for multiplication.
				    ;   2. Next, store offset of numInt in edx, and move current value 
				    ;       of numInt into eax. 
				    ;   3. Multiply eax by 10.
				    ;       Check for any overflow, which is an instant jump to error.
				    ;   4. Add value of tempHoldAl to eax
				    ;   5. Store new numInt value in numInt (not finalized, and is crucial 
				    ;       to aritmethic as long as loop is in effect).
				    ;-----------------------------------------------------------------------
 000001A4  2C 30		    sub     AL, FORTY_EIGHT             ; (AL - 48) - to get non-ASCII value 
 000001A6  8B 5D 3C		    mov     ebx, [ebp+60]               ; 1
 000001A9  88 03		    mov     BYTE PTR [ebx], AL            
 000001AB  8B 55 2C		    mov     edx, [ebp+44]               ; 2
 000001AE  8B 02		    mov     eax, [edx]                   
 000001B0  BA 0000000A		    mov     edx, TEN
 000001B5  F7 EA		    imul    edx                         ; 3
 000001B7  70 1C		    jo      _error
 000001B9  03 03		    add     eax, [ebx]                  ; 4

				    ;-------------------------------------------------------------------------
				    ; Before copying the final value to numInt and
				    ;   exiting the loop (when ecx = 0), it is important to check if 
				    ;   the number is actually in SDWORD range.
				    ;   This why we stop once ecx is still 1, and we have final numInt in eax.
				    ;--------------------------------------------------------------------------
 000001BB  83 F9 01		    cmp     ecx, ONE
 000001BE  74 4E		    je      _rangeCheck
 000001C0			_continueValidationFromRangeCheck:
 000001C0  8B 5D 2C		    mov     ebx, [ebp+44]               
 000001C3  89 03		    mov     DWORD PTR [ebx], eax        ; 5
 000001C5			_continueValidationFromNegPosSign:
 000001C5  49			    dec     ecx
 000001C6  83 F9 00		    cmp     ecx, ZERO
 000001C9  77 D0		    ja      _noSymbolsValidationLoop
				    
				    ;-----------------------------------------------------------------------
				    ; After exiting the validation loop:
				    ;   Circles back to negate boolean set inside _negate label.
				    ;   If set (negate = 1), then must perform negation of numInt.
				    ;   Else, procedure is finished.
				    ;-----------------------------------------------------------------------
 000001CB  8B 5D 34		    mov     ebx, [ebp+52]
 000001CE  83 3B 01		    cmp     DWORD PTR [ebx], ONE
 000001D1  74 30		    je      _performNegate
 000001D3  EB 57		    jmp     _finish

				;----------------------------------------------------------------------
				; Error message
				;   Displays error message, and clears the slate of both numInt and 
				;       negate, in order to get new attempt at valid user input.
				;----------------------------------------------------------------------
 000001D5			_error:
				    mdisplayString      [ebp+56]
 000001D5  52		     1	    push    edx
 000001D6  8B 55 38	     1	    mov     edx, [ebp+56]
 000001D9  E8 00000000 E     1	    call    WriteString
 000001DE  5A		     1	    pop     edx

				    ; clear numInt
 000001DF  8B 55 2C		    mov     edx, [ebp+44]                       
 000001E2  BB 00000000		    mov     ebx, ZERO
 000001E7  89 1A		    mov     DWORD PTR [edx], ebx
				    
				    ; clear negate
 000001E9  8B 55 34		    mov     edx, [ebp+52]                       
 000001EC  BB 00000000		    mov     ebx, ZERO
 000001F1  89 1A		    mov     DWORD PTR [edx], ebx

 000001F3  E9 FFFFFF74		    jmp     _tryAgain

				;----------------------------------------------------------------------
				; If the value held in AL equals a dash (45d or 2dh), then must update
				;   the negation variable boolean. 
				;----------------------------------------------------------------------
 000001F8			_negate:
 000001F8  8B 5D 34		    mov     ebx, [ebp+52]
 000001FB  C7 03 00000001	    mov     DWORD PTR [ebx], ONE
 00000201  EB C2		    jmp     _continueValidationFromNegPosSign

				;----------------------------------------------------------------------
				; After loop has run and numInt is valid but needs negation,
				;   this section actually performs the negation required for numInt.
				;----------------------------------------------------------------------
 00000203			_performNegate:
 00000203  8B 5D 2C		    mov     ebx, [ebp+44]
 00000206  8B 13		    mov     edx, [ebx]
 00000208  F7 DA		    neg     edx
 0000020A  89 13		    mov     SDWORD PTR [ebx], edx
 0000020C  EB 1E		    jmp     _finish

				;------------------------------------------------------------------------
				; Range Check
				;   Checking that final eax value generated from algorithm is within SDWORD 
				;   range. Perform this check while still in algorithm loop (ecx = 1), but
				;   at end of computation algorithm, before storing in numInt. 
				;   Before checking range, must first check negate variable boolean 
				;   to see which check to perform (either for a positive or negative number)
				;       If true, jump to _checkRangeNegative.
				;       If false, jump to _checkRangePositive.
				;   Once complete either jump to error or jump to finish out the
				;       validation loop.
				;------------------------------------------------------------------------
 0000020E			_RangeCheck:
 0000020E  8B 5D 34		    mov     ebx, [ebp+52]                   
 00000211  8B 1B		    mov     ebx, [ebx]
 00000213  83 FB 01		    cmp     ebx, ONE
 00000216  74 02		    je      _checkRangeNegative
 00000218  EB 09		    jmp     _checkRangePositive

 0000021A			_checkRangeNegative:
 0000021A  3D 80000000		    cmp     eax, LO_INT_SDWORD
 0000021F  77 B4		    ja      _error
 00000221  EB 9D		    jmp     _continueValidationFromRangeCheck

 00000223			_checkRangePositive:
 00000223  3D 7FFFFFFF		    cmp     eax, HI_INT_SDWORD
 00000228  77 AB		    ja      _error
 0000022A  EB 94		    jmp     _continueValidationFromRangeCheck

 0000022C			_finish:
				    ; clear negate
 0000022C  8B 55 34		    mov     edx, [ebp+52]                       
 0000022F  BB 00000000		    mov     ebx, ZERO
 00000234  89 1A		    mov     DWORD PTR [edx], ebx

 00000236  5D			    pop     ebp
 00000237  5B		   *	    pop    ebx
 00000238  5E		   *	    pop    esi
 00000239  5A		   *	    pop    edx
 0000023A  59		   *	    pop    ecx
 0000023B  58		   *	    pop    eax
 0000023C  C2 0024		    RET     36
 0000023F			ReadVal EndP

				;--------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; This procedure converts an SDWORD integer to its string ASCII representation.
				;   It will then print the numeric ASCII string
				;
				; Preconditions: 
				;               Uses mDisplayString to print the ASCII string.
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+12]   =   reference output parameter, ASCII string
				;           [ebp+8]    =   value input parameter, the SDWORD value to be converted
				;
				; Returns: None
				;---------------------------------------------------------------------------------
 0000023F			WriteVal PROC
 0000023F  55			    push    ebp
 00000240  8B EC		    mov     ebp, esp


				    ; Use AL and STOSB to clear newString [ebp+12]
				    
 00000242			_finish:
 00000242  5D			    pop     ebp
 00000243  C2 0008		    RET     8
 00000246			WriteVal EndP

				;---------------------------------------------------------------------------------
				; Name: CalculateSum
				;
				; This procedure calculates the sum of an integer array.
				;
				; Preconditions: The array must be of TYPE SDWORD
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+36]    =   value input parameter, lengthIntArray
				;           [ebp+32]    =   value input parameter, typeIntArray
				;           [ebp+28]    =   reference output parameter, sum
				;           [ebp+24]    =   reference input parameter, intArray
				;
				; Returns:
				;           [ebp+28]    =   reference output parameter, sum
				;-----------------------------------------------------------------------------------
 00000246			CalculateSum PROC USES ecx esi ebx edx
 00000246  51		   *	    push   ecx
 00000247  56		   *	    push   esi
 00000248  53		   *	    push   ebx
 00000249  52		   *	    push   edx
 0000024A  55			    push    ebp
 0000024B  8B EC		    mov     ebp, esp

				    ;--------------------------------------------------------------
				    ; This loop calculates the sum of an SDWORD array.
				    ;--------------------------------------------------------------
				    ; set up for _summation
 0000024D  8B 4D 24		    mov     ecx, [ebp+36]
 00000250  8B 75 18		    mov     esi, [ebp+24]
 00000253  BB 00000000		    mov     ebx, ZERO

 00000258			_summation:
 00000258  03 1E		    add     ebx, [esi]

				    ; increment esi
 0000025A  03 75 20		    add     esi, [ebp+32]
 0000025D  E2 F9		    LOOP    _summation

 0000025F  8B 55 1C		    mov     edx, [ebp+28]
 00000262  89 1A		    mov     SDWORD PTR [edx], ebx

 00000264  5D			    pop     ebp
 00000265  5A		   *	    pop    edx
 00000266  5B		   *	    pop    ebx
 00000267  5E		   *	    pop    esi
 00000268  59		   *	    pop    ecx
 00000269  C2 0010		    RET     16
 0000026C			CalculateSum EndP

				;---------------------------------------------------------------------------------
				; Name: CalculateAverage
				;
				; This procedure calculates the average of an integer array.
				;
				; Preconditions: The array must be of TYPE SDWORD.
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+28]    =   value input parameter, lengthIntArray
				;           [ebp+24]    =   value input parameter, sum
				;           [ebp+20]    =   reference output parameter, average
				;
				; Returns:
				;           [ebp+20]    =   reference output parameter, average
				;-----------------------------------------------------------------------------------
 0000026C			CalculateAverage PROC USES eax edx ebx
 0000026C  50		   *	    push   eax
 0000026D  52		   *	    push   edx
 0000026E  53		   *	    push   ebx
 0000026F  55			    push    ebp
 00000270  8B EC		    mov     ebp, esp

				    ; divide sum by length of array
 00000272  8B 45 18		    mov     eax, [ebp+24]
 00000275  8B 5D 1C		    mov     ebx, [ebp+28]
 00000278  99			    cdq
 00000279  F7 FB		    idiv    ebx

				    ; store result in average
 0000027B  8B 5D 14		    mov     ebx, [ebp+20]
 0000027E  89 03		    mov     SDWORD  PTR [ebx], eax

 00000280  5D			    pop     ebp
 00000281  5B		   *	    pop    ebx
 00000282  5A		   *	    pop    edx
 00000283  58		   *	    pop    eax
 00000284  C2 000C		    RET     12
 00000287			CalculateAverage EndP

				;-----------------------------------------------------------------------------
				; Name: Goodbye
				;
				; This procedure terminates program with a goodbye message.
				;
				; Preconditions: Uses mDisplayString - which cannot accept argument using edx. 
				;
				; Postconditions: None
				;
				; Receives:
				;           [ebp+12] = reference of string input parameter - program's goodbye
				;
				; Returns: None
				;------------------------------------------------------------------------------
 00000287			Goodbye PROC USES edx
 00000287  52		   *	    push   edx
 00000288  55			    push    ebp
 00000289  8B EC		    mov     ebp, esp

				    mDisplayString      [ebp+12]
 0000028B  52		     1	    push    edx
 0000028C  8B 55 0C	     1	    mov     edx, [ebp+12]
 0000028F  E8 00000000 E     1	    call    WriteString
 00000294  5A		     1	    pop     edx

 00000295  5D			    pop     ebp
				    RET
 00000296  5A		   *	    pop    edx
 00000297  C3		   *	    ret    00000h
 00000298			Goodbye EndP

				END main
Microsoft (R) Macro Assembler Version 14.28.29913.0	    05/31/21 20:25:21
0String Primitives & MACROs     (Proj6_byrdr.asm	     Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000254 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000298 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CalculateAverage . . . . . . . .	P Near	 0000026C _TEXT	Length= 0000001B Public STDCALL
CalculateSum . . . . . . . . . .	P Near	 00000246 _TEXT	Length= 00000026 Public STDCALL
  _summation . . . . . . . . . .	L Near	 00000258 _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Goodbye  . . . . . . . . . . . .	P Near	 00000287 _TEXT	Length= 00000011 Public STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Introduction . . . . . . . . . .	P Near	 00000113 _TEXT	Length= 00000031 Public STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000144 _TEXT	Length= 000000FB Public STDCALL
  _firstTry  . . . . . . . . . .	L Near	 0000014C _TEXT	
  _tryAgain  . . . . . . . . . .	L Near	 0000016C _TEXT	
  _setUp . . . . . . . . . . . .	L Near	 0000018A _TEXT	
  _validationLoop  . . . . . . .	L Near	 00000190 _TEXT	
  _noSymbolsValidationLoop . . .	L Near	 0000019B _TEXT	
  _firstValidationContinue . . .	L Near	 0000019C _TEXT	
  _continueValidationFromRangeCheck 	L Near	 000001C0 _TEXT	
  _continueValidationFromNegPosSign 	L Near	 000001C5 _TEXT	
  _error . . . . . . . . . . . .	L Near	 000001D5 _TEXT	
  _negate  . . . . . . . . . . .	L Near	 000001F8 _TEXT	
  _performNegate . . . . . . . .	L Near	 00000203 _TEXT	
  _RangeCheck  . . . . . . . . .	L Near	 0000020E _TEXT	
  _checkRangeNegative  . . . . .	L Near	 0000021A _TEXT	
  _checkRangePositive  . . . . .	L Near	 00000223 _TEXT	
  _finish  . . . . . . . . . . .	L Near	 0000022C _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000023F _TEXT	Length= 00000007 Public STDCALL
  _finish  . . . . . . . . . . .	L Near	 00000242 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000113 Public STDCALL
  _getInputLoop  . . . . . . . .	L Near	 00000019 _TEXT	
  _displayIntArrayASCII  . . . .	L Near	 0000007F _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ELEVEN . . . . . . . . . . . . .	Number	 0000000Bh   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FIFTY  . . . . . . . . . . . . .	Number	 00000032h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FORTY_EIGHT  . . . . . . . . . .	Number	 00000030h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
HI_ASCII_DEC_NUM . . . . . . . .	Number	 00000039h   
HI_INT_SDWORD  . . . . . . . . .	Number	 7FFFFFFFh   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
LO_ASCII_DEC_NUM . . . . . . . .	Number	 00000030h   
LO_INT_SDWORD  . . . . . . . . .	Number	 -80000000h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NEG_SIGN . . . . . . . . . . . .	Number	 0000002Dh   
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
ONE  . . . . . . . . . . . . . .	Number	 00000001h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
POS_SIGN . . . . . . . . . . . .	Number	 0000002Bh   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TEN  . . . . . . . . . . . . . .	Number	 0000000Ah   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ZERO . . . . . . . . . . . . . .	Number	 00000000h   
average  . . . . . . . . . . . .	DWord	 00000242 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
byteCount  . . . . . . . . . . .	DWord	 000001FE _DATA	
comma  . . . . . . . . . . . . .	Byte	 00000246 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMessage . . . . . . . . . .	Byte	 00000117 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeMessage . . . . . . . . .	Byte	 00000189 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intArray . . . . . . . . . . . .	DWord	 0000020E _DATA	
lengthIntArray . . . . . . . . .	DWord	 00000236 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxCharUserNum . . . . . . . . .	DWord	 000001FA _DATA	
negate . . . . . . . . . . . . .	DWord	 00000206 _DATA	
newString  . . . . . . . . . . .	Byte	 00000249 _DATA	
numInt . . . . . . . . . . . . .	DWord	 00000202 _DATA	
programDescription . . . . . . .	Byte	 00000041 _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
secondUserPrompt . . . . . . . .	Byte	 0000010B _DATA	
sum  . . . . . . . . . . . . . .	DWord	 0000023E _DATA	
tempHoldAL . . . . . . . . . . .	DWord	 0000020A _DATA	
typeIntArray . . . . . . . . . .	DWord	 0000023A _DATA	
userAverage  . . . . . . . . . .	Byte	 00000179 _DATA	
userEntered  . . . . . . . . . .	Byte	 0000015F _DATA	
userNum  . . . . . . . . . . . .	Byte	 000001C8 _DATA	
userPrompt . . . . . . . . . . .	Byte	 000000EF _DATA	
userSum  . . . . . . . . . . . .	Byte	 0000016D _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
